/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_paymentoutput_free(a: number): void;
export function __wbg_get_paymentoutput_address(a: number): number;
export function __wbg_set_paymentoutput_address(a: number, b: number): void;
export function __wbg_get_paymentoutput_amount(a: number): number;
export function __wbg_set_paymentoutput_amount(a: number, b: number): void;
export function paymentoutput_new(a: number, b: number, c: number): number;
export function __wbg_paymentoutputs_free(a: number): void;
export function paymentoutputs_js_ctor(a: number, b: number): void;
export function __wbg_virtualtransaction_free(a: number): void;
export function virtualtransaction_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_wallet_free(a: number): void;
export function __wbg_xprivatekey_free(a: number): void;
export function xprivatekey_new(a: number, b: number, c: number, d: number, e: number): void;
export function xprivatekey_receiveKey(a: number, b: number, c: number): void;
export function xprivatekey_changeKey(a: number, b: number, c: number): void;
export function __wbg_xpublickey_free(a: number): void;
export function xpublickey_fromXPrv(a: number, b: number, c: number, d: number): number;
export function xpublickey_receiveAddresses(a: number, b: number, c: number): number;
export function xpublickey_changeAddresses(a: number, b: number, c: number): number;
export function createTransaction(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function adjustTransactionForFee(a: number, b: number, c: number, d: number, e: number): void;
export function minimumTransactionFee(a: number, b: number): number;
export function calculateTransactionMass(a: number, b: number, c: number, d: number): void;
export function __wbg_addressgenerator_free(a: number): void;
export function addressgenerator_publicKey(a: number, b: number): void;
export function addressgenerator_currentAddress(a: number): number;
export function __wbg_transaction_free(a: number): void;
export function transaction_is_coinbase(a: number): number;
export function transaction_finalize(a: number, b: number): void;
export function transaction_id(a: number): number;
export function transaction_constructor(a: number, b: number): void;
export function transaction_get_inputs_as_js_array(a: number): number;
export function transaction_set_inputs_from_js_array(a: number, b: number): void;
export function transaction_get_outputs_as_js_array(a: number): number;
export function transaction_set_outputs_from_js_array(a: number, b: number): void;
export function transaction_version(a: number): number;
export function transaction_set_version(a: number, b: number): void;
export function transaction_gas(a: number): number;
export function transaction_set_gas(a: number, b: number): void;
export function transaction_get_subnetwork_id_as_hex(a: number, b: number): void;
export function transaction_set_subnetwork_id_from_js_value(a: number, b: number): void;
export function transaction_get_payload_as_hex_string(a: number, b: number): void;
export function transaction_set_payload_from_js_value(a: number, b: number): void;
export function transaction_set_lock_time(a: number, b: number): void;
export function transaction_lock_time(a: number): number;
export function __wbg_transactioninput_free(a: number): void;
export function transactioninput_constructor(a: number, b: number): void;
export function transactioninput_get_previous_outpoint(a: number): number;
export function transactioninput_set_previous_outpoint(a: number, b: number): void;
export function transactioninput_get_signature_script_as_hex(a: number, b: number): void;
export function transactioninput_set_signature_script_from_js_value(a: number, b: number): void;
export function transactioninput_get_sequence(a: number): number;
export function transactioninput_set_sequence(a: number, b: number): void;
export function transactioninput_get_sig_op_count(a: number): number;
export function transactioninput_set_sig_op_count(a: number, b: number): void;
export function __wbg_account_free(a: number): void;
export function __wbg_get_account_accountKind(a: number): number;
export function __wbg_set_account_accountKind(a: number, b: number): void;
export function account_balance(a: number): number;
export function signer___getClassname(a: number, b: number): void;
export function __wbg_signer_free(a: number): void;
export function __wbg_get_signer_verify(a: number): number;
export function __wbg_set_signer_verify(a: number, b: number): void;
export function signer_js_ctor(a: number, b: number): void;
export function signer_signTransaction(a: number, b: number, c: number, d: number): void;
export function signTransaction(a: number, b: number, c: number, d: number): void;
export function signScriptHash(a: number, b: number, c: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_get_public_key(a: number): number;
export function keypair_get_private_key(a: number): number;
export function keypair_get_xonly_public_key(a: number): number;
export function generate_random_keypair_not_secure(a: number): void;
export function privatekey___getClassname(a: number, b: number): void;
export function __wbg_privatekey_free(a: number): void;
export function privatekey_new(a: number, b: number, c: number): void;
export function __wbg_utxoentry_free(a: number): void;
export function __wbg_get_utxoentry_address(a: number): number;
export function __wbg_set_utxoentry_address(a: number, b: number): void;
export function __wbg_get_utxoentry_outpoint(a: number): number;
export function __wbg_set_utxoentry_outpoint(a: number, b: number): void;
export function __wbg_get_utxoentry_entry(a: number): number;
export function __wbg_set_utxoentry_entry(a: number, b: number): void;
export function utxoentryreference___getClassname(a: number, b: number): void;
export function __wbg_utxoentryreference_free(a: number): void;
export function utxoentryreference_data(a: number): number;
export function __wbg_selectioncontext_free(a: number): void;
export function __wbg_get_selectioncontext_amount(a: number): number;
export function __wbg_set_selectioncontext_amount(a: number, b: number): void;
export function __wbg_get_selectioncontext_totalAmount(a: number): number;
export function __wbg_set_selectioncontext_totalAmount(a: number, b: number): void;
export function selectioncontext_selected_entries(a: number): number;
export function __wbg_utxoset_free(a: number): void;
export function utxoset_insert(a: number, b: number): void;
export function utxoset_select(a: number, b: number, c: number): number;
export function utxoset_from(a: number, b: number): void;
export function __wbg_utxoentries_free(a: number): void;
export function utxoentries_js_ctor(a: number, b: number): void;
export function utxoentries_get_items_as_js_array(a: number): number;
export function utxoentries_set_items_from_js_array(a: number, b: number): void;
export function __wbg_txutxoentrylist_free(a: number): void;
export function utxoentrylist_js_ctor(a: number, b: number): void;
export function utxoentrylist_get_items_as_js_array(a: number): number;
export function utxoentrylist_set_items_from_js_array(a: number, b: number): void;
export function __wbg_mutabletransaction_free(a: number): void;
export function __wbg_get_mutabletransaction_entries(a: number): number;
export function __wbg_set_mutabletransaction_entries(a: number, b: number): void;
export function mutabletransaction_new(a: number, b: number): number;
export function mutabletransaction_toJSON(a: number, b: number): void;
export function mutabletransaction_fromJSON(a: number, b: number, c: number): void;
export function mutabletransaction_getScriptHashes(a: number, b: number): void;
export function mutabletransaction_setSignatures(a: number, b: number, c: number): void;
export function mutabletransaction_toRpcTransaction(a: number, b: number): void;
export function mutabletransaction_get_inputs(a: number, b: number): void;
export function mutabletransaction_get_outputs(a: number, b: number): void;
export function __wbg_transactionoutpoint_free(a: number): void;
export function transactionoutpoint_new(a: number, b: number): number;
export function transactionoutpoint_transactionId(a: number): number;
export function transactionoutpoint_set_transactionId(a: number, b: number): void;
export function transactionoutpoint_index(a: number): number;
export function transactionoutpoint_set_index(a: number, b: number): void;
export function isTransactionOutputDust(a: number): number;
export function __wbg_addressgeneratorv0_free(a: number): void;
export function __wbg_walletaccountv0_free(a: number): void;
export function __wbg_store_free(a: number): void;
export function store_filename(a: number, b: number): void;
export function encrypt(a: number, b: number, c: number, d: number, e: number): void;
export function decrypt(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_transactionoutputinner_free(a: number): void;
export function __wbg_get_transactionoutputinner_value(a: number): number;
export function __wbg_set_transactionoutputinner_value(a: number, b: number): void;
export function __wbg_get_transactionoutputinner_scriptPublicKey(a: number): number;
export function __wbg_set_transactionoutputinner_scriptPublicKey(a: number, b: number): void;
export function __wbg_transactionoutput_free(a: number): void;
export function transactionoutput_new(a: number, b: number): number;
export function transactionoutput_value(a: number): number;
export function transactionoutput_set_value(a: number, b: number): void;
export function transactionoutput_scriptPublicKey(a: number): number;
export function transactionoutput_set_scriptPublicKey(a: number, b: number): void;
export function transactionoutput_isDust(a: number): number;
export function __wbg_xprv_free(a: number): void;
export function xprv_new(a: number, b: number, c: number): void;
export function xprv_deriveChild(a: number, b: number, c: number, d: number): void;
export function xprv_derivePath(a: number, b: number, c: number): void;
export function xprv_intoString(a: number, b: number, c: number, d: number): void;
export function xprv_publicKey(a: number, b: number): void;
export function __wbg_derivationpath_free(a: number): void;
export function derivationpath_new(a: number, b: number, c: number): void;
export function derivationpath_isEmpty(a: number): number;
export function derivationpath_length(a: number): number;
export function derivationpath_parent(a: number): number;
export function derivationpath_push(a: number, b: number, c: number, d: number): void;
export function derivationpath_toString(a: number, b: number): void;
export function __wbg_xpub_free(a: number): void;
export function xpub_new(a: number, b: number, c: number): void;
export function xpub_deriveChild(a: number, b: number, c: number, d: number): void;
export function xpub_derivePath(a: number, b: number, c: number): void;
export function xpub_intoString(a: number, b: number, c: number, d: number): void;
export function __wbg_mnemonic_free(a: number): void;
export function mnemonic_constructor(a: number, b: number, c: number, d: number): void;
export function mnemonic_entropy(a: number, b: number): void;
export function mnemonic_set_entropy(a: number, b: number, c: number): void;
export function mnemonic_random(): number;
export function mnemonic_phrase(a: number, b: number): void;
export function mnemonic_set_phrase(a: number, b: number, c: number): void;
export function mnemonic_toSeed(a: number, b: number, c: number, d: number): void;
export function __wbg_rpcclient_free(a: number): void;
export function rpcclient_new(a: number, b: number, c: number): number;
export function rpcclient_connect(a: number): number;
export function rpcclient_disconnect(a: number): number;
export function rpcclient_notify(a: number, b: number): number;
export function rpcclient_subscribeDaaScore(a: number): number;
export function rpcclient_unsubscribeDaaScore(a: number): number;
export function rpcclient_subscribeUtxosChanged(a: number, b: number): number;
export function rpcclient_unsubscribeUtxosChanged(a: number, b: number): number;
export function rpcclient_subscribeVirtualChainChanged(a: number, b: number): number;
export function rpcclient_unsubscribeVirtualChainChanged(a: number, b: number): number;
export function rpcclient_subscribeBlockAdded(a: number): number;
export function rpcclient_unsubscribeBlockAdded(a: number): number;
export function rpcclient_subscribeFinalityConflict(a: number): number;
export function rpcclient_unsubscribeFinalityConflict(a: number): number;
export function rpcclient_subscribeFinalityConflictResolved(a: number): number;
export function rpcclient_unsubscribeFinalityConflictResolved(a: number): number;
export function rpcclient_subscribeSinkBlueScoreChanged(a: number): number;
export function rpcclient_unsubscribeSinkBlueScoreChanged(a: number): number;
export function rpcclient_subscribeVirtualDaaScoreChanged(a: number): number;
export function rpcclient_unsubscribeVirtualDaaScoreChanged(a: number): number;
export function rpcclient_subscribePruningPointUtxoSetOverride(a: number): number;
export function rpcclient_unsubscribePruningPointUtxoSetOverride(a: number): number;
export function rpcclient_subscribeNewBlockTemplate(a: number): number;
export function rpcclient_unsubscribeNewBlockTemplate(a: number): number;
export function rpcclient_getBlockCount(a: number): number;
export function rpcclient_getBlockDagInfo(a: number): number;
export function rpcclient_getCoinSupply(a: number): number;
export function rpcclient_getConnectedPeerInfo(a: number): number;
export function rpcclient_getInfo(a: number): number;
export function rpcclient_getPeerAddresses(a: number): number;
export function rpcclient_getProcessMetrics(a: number): number;
export function rpcclient_getSelectedTipHash(a: number): number;
export function rpcclient_getSinkBlueScore(a: number): number;
export function rpcclient_ping(a: number): number;
export function rpcclient_shutdown(a: number): number;
export function rpcclient_addPeer(a: number, b: number): number;
export function rpcclient_ban(a: number, b: number): number;
export function rpcclient_estimateNetworkHashesPerSecond(a: number, b: number): number;
export function rpcclient_getBalanceByAddress(a: number, b: number): number;
export function rpcclient_getBalancesByAddresses(a: number, b: number): number;
export function rpcclient_getBlock(a: number, b: number): number;
export function rpcclient_getBlocks(a: number, b: number): number;
export function rpcclient_getBlockTemplate(a: number, b: number): number;
export function rpcclient_getCurrentNetwork(a: number, b: number): number;
export function rpcclient_getHeaders(a: number, b: number): number;
export function rpcclient_getMempoolEntries(a: number, b: number): number;
export function rpcclient_getMempoolEntriesByAddresses(a: number, b: number): number;
export function rpcclient_getMempoolEntry(a: number, b: number): number;
export function rpcclient_getSubnetwork(a: number, b: number): number;
export function rpcclient_getVirtualChainFromBlock(a: number, b: number): number;
export function rpcclient_resolveFinalityConflict(a: number, b: number): number;
export function rpcclient_submitBlock(a: number, b: number): number;
export function rpcclient_unban(a: number, b: number): number;
export function rpcclient_submitTransaction(a: number, b: number): number;
export function rpcclient_getUtxosByAddresses(a: number, b: number): number;
export function __wbg_scriptpublickey_free(a: number): void;
export function __wbg_get_scriptpublickey_version(a: number): number;
export function __wbg_set_scriptpublickey_version(a: number, b: number): void;
export function scriptpublickey_constructor(a: number, b: number, c: number): void;
export function scriptpublickey_script_as_hex(a: number, b: number): void;
export function __wbg_txutxoentry_free(a: number): void;
export function __wbg_get_txutxoentry_amount(a: number): number;
export function __wbg_set_txutxoentry_amount(a: number, b: number): void;
export function __wbg_get_txutxoentry_scriptPublicKey(a: number): number;
export function __wbg_set_txutxoentry_scriptPublicKey(a: number, b: number): void;
export function __wbg_get_txutxoentry_blockDaaScore(a: number): number;
export function __wbg_set_txutxoentry_blockDaaScore(a: number, b: number): void;
export function __wbg_get_txutxoentry_isCoinbase(a: number): number;
export function __wbg_set_txutxoentry_isCoinbase(a: number, b: number): void;
export function rustsecp256k1_v0_6_1_context_create(a: number): number;
export function rustsecp256k1_v0_6_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_6_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_6_1_default_error_callback_fn(a: number, b: number): void;
export function __wbg_hash_free(a: number): void;
export function hash_constructor(a: number, b: number): number;
export function multiplexerclient_new(): number;
export function multiplexerclient_setHandler(a: number, b: number, c: number): void;
export function multiplexerclient_removeHandler(a: number, b: number): void;
export function multiplexerclient_stop(a: number): number;
export function __wbg_multiplexerclient_free(a: number): void;
export function defer(): number;
export function show_panic_hook_logs(): void;
export function init_popup_panic_hook(): void;
export function init_console_panic_hook(): void;
export function init_workflow(a: number, b: number, c: number): void;
export function __wbg_address_free(a: number): void;
export function address_constructor(a: number, b: number): number;
export function address_toString(a: number, b: number): void;
export function address_toJSON(a: number, b: number): void;
export function address_version(a: number, b: number): void;
export function address_prefix(a: number, b: number): void;
export function address_set_prefix(a: number, b: number, c: number): void;
export function address_payload(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h99cc04b08d824b35(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4c3e8ff6fcf1314c(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1433b3f4c03ac8d9(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h5ed8c88434b19645(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h8c0aee77f1aad5c1(a: number, b: number, c: number, d: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
